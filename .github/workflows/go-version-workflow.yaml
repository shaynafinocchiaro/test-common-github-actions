# Copyright (c) 2024 Dell Inc., or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0

# Reusable workflow to perform go version update on Golang based projects
name: Update Go Version Workflow

on:
  workflow_call:

jobs:
    go-version:
      name: Update go version
      runs-on: ubuntu-latest
      steps:
      - name: Check latest go version
        run: |
          echo "GO_VERSION_STRIPPED=$(curl -sL https://go.dev/VERSION?m=text | awk 'NR==1{print $1}' | tr -cd '[:digit:].')" >> $GITHUB_ENV
          echo "GO_VERSION=$(curl -sL https://go.dev/VERSION?m=text | awk 'NR==1{print $1}')" >> $GITHUB_ENV

      - uses: actions/setup-go@v5
        with:
          go-version: "${{ env.GO_VERSION_STRIPPED }}"
          cache: false
          check-latest: true

      # Uses trigger-workflow.yaml payload
      - name: Checkout the code
        uses: actions/checkout@v4

      # This step will update the go version in:
      # 1 - go.mod files and go.mod toolchain, if found
      # 2 - csm-common.mk for UBI image
      # 3 - github actions
      # 4 - Dockerfiles
      - name: Update go version
        env:
          find_gomod: find . -name go.mod
          grep_cmd1: git grep -l "toolchain"
          grep_cmd2: grep -l "go-version"
          grep_cmd3: git grep -l "FROM golang"
          exclude_file: go-version-workflow.yaml
        run: |
          echo "Updating go version to ${{ env.GO_VERSION_STRIPPED }}"

          if [ -n "$(${{ env.find_gomod }})" ]; then $(cd -- "$(dirname "$(${{ env.find_gomod }} | head -1 | sh -c "go mod edit -go=${{ env.GO_VERSION_STRIPPED }} && go mod tidy")")"); fi

          if [ -n "$(${{ env.find_gomod }})" ] && [ -n "$(${{ env.grep_cmd1 }})" ]; then sh -c "go mod edit -toolchain=${{ env.GO_VERSION }} && go mod tidy"; fi

          if [ -f config/csm-common.mk ]; then sed -i "s/DEFAULT_GOVERSION.*/DEFAULT_GOVERSION=\"${{ env.GO_VERSION_STRIPPED }}\"/g" config/csm-common.mk; fi

          find . -type f ! -name "${{ env.exclude_file }}" -exec "${{ env.grep_cmd2 }}" {} \; | while read -r file; do sed -i "s/go-version:.*/go-version: \"${{ env.GO_VERSION_STRIPPED }}\"/" "$file"; done

          if [ -n "$(${{ env.grep_cmd3 }})" ]; then ${{ env.grep_cmd3 }} | xargs sed -i "s/golang:.*/golang:${{ env.GO_VERSION_STRIPPED }}/"; fi

      # Needed for signing commits using Github App tokens
      - uses: actions/create-github-app-token@v1.11.0
        id: generate-token
        with:
          app-id: ${{ vars.RELEASE_ACTIONS_APP_ID }}
          private-key: ${{ secrets.RELEASE_ACTIONS_APP_PRIVATE_KEY }}

      # Must enable "allow GitHub Actions to create pull requests" setting
      # Author defaults to the user who triggered the workflow run
      - name: Create pull request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          branch: "go-${{ env.GO_VERSION_STRIPPED }}"
          commit-message: "Update go version to ${{ env.GO_VERSION_STRIPPED }}"
          title: "Update go version to ${{ env.GO_VERSION_STRIPPED }}"
          body: |
            Go version updated to ${{ env.GO_VERSION_STRIPPED }}
            Auto-generated by [common-github-actions](https://github.com/dell/common-github-actions)
          sign-commits: true
          delete-branch: true
